#include "hsp3dish.as"
#define NICO_SIZE 48
#define ENEMY_SIZE 48
#define MAX_ENEMY 50
#define INITIAL_LEVEL 1
#define SCORE_FRAME_RATE 60

	// 初期化
	screen 0, 320, 480
	
	mmload "great.wav",0
	mmload "hit.wav",1

	buffer 1
	picload "nico.png"
	
	gsel 0
	gmode 2,NICO_SIZE, NICO_SIZE
	randomize

	winx = ginfo(12)
	winy = ginfo(13)

	
*titleScene
	gosub *init
	repeat
		redraw 0
		color 30,0,0:boxf
		pos 0,0
		color 255,255,255
		mes "Nicorush"
		mes "Click to Start"
	
		stick tap
		if tap&256:break
	
		await 33
		redraw 1
	
	
	loop
	
*main
	nico_rotate = 0
	
	level = INITIAL_LEVEL + (score / 100)
	
	if (game_over = 0) {
		time_bonus_interval--
		if (time_bonus_interval<=0) {
			score++
			time_bonus_interval=SCORE_FRAME_RATE
		}
		gosub *getKeys
		gosub *enemyMove
		gosub *hitCheck
	}
	gosub *render
	if (game_over = 1) {
		stick tap
		if (tap&256): goto *titleScene
	}
	// 33ミリ秒待つ
	await 33

	// *mainまで戻る
	goto *main


// サブルーチン------------------------------------------------------------

*init
	game_over = 0
	nico_x = -NICO_SIZE
	nico_y = -NICO_SIZE
	score = 0
	score_great = 0
	score_hit = 0
	time_bonus_interval=SCORE_FRAME_RATE
	level = 1
	
	enemy_spawn_interval = 0
	enemy_group_size = 0
	
	dim enemy_x, MAX_ENEMY
	dim enemy_y, MAX_ENEMY
	dim enemy_rotate, MAX_ENEMY
	dim enemy_speed_x, MAX_ENEMY
	dim enemy_speed_y, MAX_ENEMY
	dim enemy_life, MAX_ENEMY
	dim enemy_score, MAX_ENEMY
	
	return
	
	
*getKeys
	stick tap, 256
	if tap & 256 {
		if (mousex >= nico_x - (NICO_SIZE/2)) & (mousex <= nico_x + (NICO_SIZE/2))&(mousey >= nico_y - (NICO_SIZE/2)) & (mousey <= nico_y + (NICO_SIZE/2)) {
			nico_rotate = 1
		} else {
			nico_x = mousex
			nico_y = mousey
		}
	}
	
	return
	
*enemyMove

	createFlag = 0
	if (enemy_spawn_interval > 0) {
		enemy_spawn_interval--
	}
	
	if (enemy_spawn_interval = 0) {
		createFlag = 1
		enemy_spawn_interval = 150 - (level * 10) - rnd(level * 10)
		if (enemy_spawn_interval <=15) {
			enemy_spawn_interval = 15
		}
	}
	
	repeat MAX_ENEMY
		if (enemy_life.cnt = 0) {
			if (createFlag = 1) {
				createFlag = 0
				create_enemy_id = cnt
				gosub *createEnemy
			} else {
				continue
			}
		}
		
		enemy_x.cnt += enemy_speed_x.cnt
		if (enemy_x.cnt < ENEMY_SIZE / 2) {
			enemy_x.cnt = ENEMY_SIZE / 2
			enemy_speed_x.cnt = -enemy_speed_x.cnt
		}
		if (enemy_x.cnt > winx - (ENEMY_SIZE / 2)) {
			enemy_x.cnt = winx - (ENEMY_SIZE / 2)
			enemy_speed_x.cnt = -enemy_speed_x.cnt
		}
		
		enemy_y.cnt += enemy_speed_y.cnt
		if (enemy_y.cnt > winy) {
			enemy_life.cnt = 0
			game_over = 1
			wait 50
		}
	loop
	
	return
	
*createEnemy
	cid = create_enemy_id
	
	if (enemy_group_size <= 0) {
		enemy_group_size = 2 + rnd(level * 3)
		if (enemy_group_size > 10) {
			enemy_group_size = 10
		}
	
		group_x = (ENEMY_SIZE/2) + rnd(winx - (ENEMY_SIZE/2))
		group_lv = 1 + rnd(level * 10)
		group_speed_x = (rnd(group_lv)/4) - (rnd(group_lv)/2)
	
		if (group_speed_x < -30) {
			group_speed_x = -30
		}
		if (group_speed_x > 30) {
			group_speed_x = 30
		}	
	
		
		group_speed_y = 2 + (group_lv/4) + rnd(2)
	
		if (rnd(4)=0 & level > 8) {
			//たまに遅いのが出る
			group_speed_y = 2+rnd(2)
		}
		if (group_speed_y > 10) {
			group_speed_y = 10
		}
	}
	
	enemy_group_size--
	
	enemy_life.cid = 1
	enemy_x.cid = group_x
	enemy_y.cid = 0
	enemy_rotate.cid = rnd(2)
	
	enemy_score.cid = group_lv
	enemy_speed_x.cid = group_speed_x
	enemy_speed_y.cid = group_speed_y
	
	return
	
*hitCheck
	repeat MAX_ENEMY
		if enemy_life.cnt = 0 {
			continue
		}
		
		//二点間の距離の公式
		dx = enemy_x.cnt - nico_x
		dy = enemy_y.cnt - nico_y
		if sqrt( (dx*dx) + (dy*dy) ) <= (NICO_SIZE/2) + (ENEMY_SIZE/2) {
			enemy_life.cnt = 0
			if (nico_rotate = enemy_rotate.cnt) {
				score+=enemy_score.cnt
				upperBonus = (300 - nico_y) / 10
				if (upperBonus > 0) {
					score+=upperBonus
				}
				mmplay 0
				score_great++
			} else {
				score+=1
				mmplay 1
				score_hit++
			}
		}
	loop


	return
	
*render 
	// 画面の書き換えを止める
	redraw 0

	// 画面全体を(0, 0, 32)の色で塗りつぶす
	color game_over * 60, 0, 0
	boxf
	
	color 255,255,255
	pos 0,0: mes "SCORE:" + score
	mes "LEVEL:" + level
	mes "Great/Hit:" + score_great + " / " + score_hit
	
	repeat MAX_ENEMY
		if (enemy_life.cnt = 0) {
			continue
		}
		pos enemy_x.cnt - (ENEMY_SIZE/2), enemy_y.cnt - (ENEMY_SIZE/2)
		gcopy 1, ENEMY_SIZE*enemy_rotate.cnt,0, ENEMY_SIZE, ENEMY_SIZE
	loop
	
	
	
	pos nico_x - (NICO_SIZE/2), nico_y - (NICO_SIZE/2)
	gcopy 1, NICO_SIZE*nico_rotate,0, NICO_SIZE, NICO_SIZE
	


	// 画面の書き換えを反映
	redraw 1
	return